#!/usr/bin/env python3
import os
import sys
import subprocess
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
import apt

class PackageManagerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Update Hub")
        self.setGeometry(100, 100, 800, 600)

        self.cache = apt.Cache()
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)

        self.create_system_upgrade_tab()
        self.create_update_tab()
        self.create_package_management_tab()

    def package_installed(self, package_name):
        """Check if a package is installed"""
        return package_name in self.cache and self.cache[package_name].is_installed

    def create_system_upgrade_tab(self):
        system_upgrade_tab = QWidget()
        layout = QVBoxLayout()

        self.distribution_label = QLabel("Checking current distribution version...")
        self.distribution_label.setWordWrap(True)

        self.upgrade_status_label = QLabel("Your system is up-to-date.")
        self.upgrade_status_label.setWordWrap(True)

        self.upgrade_all_button = QPushButton("Upgrade Now")
        self.upgrade_all_button.setEnabled(False)
        self.upgrade_all_button.clicked.connect(self.upgrade_system)

        self.refresh_button = QPushButton("Check for Upgrade")
        self.refresh_button.clicked.connect(self.check_for_upgrade)

        layout.addWidget(self.distribution_label)
        layout.addWidget(self.upgrade_status_label)
        layout.addWidget(self.upgrade_all_button)
        layout.addWidget(self.refresh_button)

        system_upgrade_tab.setLayout(layout)
        self.tabs.addTab(system_upgrade_tab, "System Upgrade")

        self.check_for_upgrade()

    def check_for_upgrade(self):
        """Check if an upgrade is available for the system"""
        try:
            release_info = subprocess.check_output(["lsb_release", "-r"], universal_newlines=True)
            self.distribution_label.setText(f"Current Distribution Info:\n{release_info}")
        except subprocess.CalledProcessError:
            self.distribution_label.setText("Failed to retrieve distribution info.")

        try:
            upgrade_check = subprocess.run(["do-release-upgrade", "-c"], capture_output=True, text=True)
            if upgrade_check.stdout and "run 'do-release-upgrade'" in upgrade_check.stdout.strip().lower():
                self.upgrade_status_label.setText("Updates are available! Click 'Upgrade Now' to upgrade.")
                self.upgrade_all_button.setEnabled(True)
            else:
                self.upgrade_status_label.setText("Your system is up-to-date.")
                self.upgrade_all_button.setEnabled(False)
        except subprocess.CalledProcessError as e:
            self.upgrade_status_label.setText(f"Error checking upgrade status {e}.")
            self.upgrade_all_button.setEnabled(False)

    def upgrade_system(self):
        """Upgrade the system"""
        try:
            response = QMessageBox.question(self, "Confirm Upgrade", "Are you sure you want to upgrade your system?", QMessageBox.Yes | QMessageBox.No)
            if response == QMessageBox.Yes:
                subprocess.run(["sudo", "do-release-upgrade", "-f", "DistUpgradeViewNonInteractive"], check=True)
                QMessageBox.information(self, "System Upgrade", "Your system has been successfully upgraded!")
                self.check_for_upgrade()
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "Upgrade Error", f"An error occurred during the upgrade: {e}")

    def create_update_tab(self):
        """Create the 'Updates' tab"""
        update_tab = QWidget()
        layout = QVBoxLayout()

        action_layout = QHBoxLayout()

        self.refresh_button = QPushButton("Refresh")
        self.refresh_button.clicked.connect(self.fetch_updates)
        self.install_button = QPushButton("Install")
        self.install_button.clicked.connect(self.install_updates)
        self.delete_button = QPushButton("Delete")
        self.delete_button.clicked.connect(self.delete_update)

        action_layout.addWidget(self.refresh_button)
        action_layout.addWidget(self.install_button)
        action_layout.addWidget(self.delete_button)

        self.update_table = QTableWidget()
        self.update_table.setColumnCount(4)
        self.update_table.setHorizontalHeaderLabels(["Package", "Current Version", "New Version", "Size"])
        self.update_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.update_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.update_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)
        self.update_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
        
        self.update_table.setSelectionMode(QAbstractItemView.MultiSelection)
        layout.addLayout(action_layout)
        layout.addWidget(self.update_table)

        self.fetch_updates()

        update_tab.setLayout(layout)
        self.tabs.addTab(update_tab, "Updates")

    def fetch_updates(self):
        """Fetch available updates and display them in the update table"""
        self.cache.update()
        self.cache.open()

        updates = [pkg for pkg in self.cache if pkg.is_upgradable]
        self.update_table.setRowCount(len(updates))

        for row, pkg in enumerate(updates):
            package_name_item = QTableWidgetItem(pkg.name)
            current_version_item = QTableWidgetItem(str(pkg.installed.version))
            new_version_item = QTableWidgetItem(str(pkg.candidate.version))

            size_item = QTableWidgetItem(f"{pkg.candidate.size / 1024 / 1024:.2f} MB")

            self.update_table.setItem(row, 0, package_name_item)
            self.update_table.setItem(row, 1, current_version_item)
            self.update_table.setItem(row, 2, new_version_item)
            self.update_table.setItem(row, 3, size_item)

    def install_updates(self):
        """Install the selected updates"""
        selected_rows = self.update_table.selectedIndexes()
        
        if not selected_rows:
            QMessageBox.warning(self, "No Selection", "Please select at least one package to install.")
            return

        packages_to_install = []
        for index in selected_rows:
            row = index.row()
            package_name = self.update_table.item(row, 0).text()
            packages_to_install.append(package_name)

        try:
            for package_name in packages_to_install:
                subprocess.run(["sudo", "apt-get", "install", "-y", package_name], check=True)

            QMessageBox.information(self, "Install Updates", "The selected updates have been successfully installed!")
            self.fetch_updates()
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "Installation Error", f"An error occurred while installing updates: {e}")

    def delete_update(self):
        """Placeholder for delete functionality"""
        QMessageBox.information(self, "Delete Update", "Delete functionality not implemented yet.")

    def create_package_management_tab(self):
        """Creates the Package Management tab"""
        package_management_tab = QWidget()
        layout = QVBoxLayout()

        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search for a package to install...")
        self.search_box.returnPressed.connect(self.search_package)
        layout.addWidget(self.search_box)

        self.search_results_table = QTableWidget()
        self.search_results_table.setColumnCount(2)
        self.search_results_table.setHorizontalHeaderLabels(["Package", "Install"])
        self.search_results_table.setSelectionMode(QAbstractItemView.MultiSelection)
        self.search_results_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.search_results_table)
        self.search_results_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.search_results_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)

        self.remove_search_box = QLineEdit()
        self.remove_search_box.setPlaceholderText("Search for a package to remove...")
        self.remove_search_box.returnPressed.connect(self.search_installed_package)
        layout.addWidget(self.remove_search_box)

        self.installed_table = QTableWidget()
        self.installed_table.setColumnCount(2)
        self.installed_table.setHorizontalHeaderLabels(["Installed Package", "Remove"])
        self.installed_table.setSelectionMode(QAbstractItemView.MultiSelection)
        self.installed_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.installed_table)
        self.installed_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.installed_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)

        self.list_installed_packages()

        package_management_tab.setLayout(layout)
        self.tabs.addTab(package_management_tab, "Package Management")

    def search_installed_package(self):
        """Search for an installed package and display results"""
        search_term = self.remove_search_box.text()
        installed_packages = subprocess.check_output("apt list --installed", shell=True, universal_newlines=True).splitlines()
        installed_packages = installed_packages[1:]  # Skip the header line

        if search_term:
            filtered_packages = [pkg for pkg in installed_packages if search_term in pkg]
        else:
            filtered_packages = installed_packages

        self.installed_table.setRowCount(len(filtered_packages))

        for row, package in enumerate(filtered_packages):
            package_name = package.split('/')[0]
            self.installed_table.setItem(row, 0, QTableWidgetItem(package_name))

            remove_button = QPushButton("Remove")
            remove_button.clicked.connect(lambda checked, pkg=package_name: self.remove_package_action(pkg))
            self.installed_table.setCellWidget(row, 1, remove_button)

    def list_installed_packages(self):
        """List all installed packages and display them in the installed table"""
        try:
            installed_packages = subprocess.check_output(["apt list --installed"], shell=True, universal_newlines=True).splitlines()
            installed_packages = installed_packages[1:]  # Skip the header line

            if not installed_packages:
                QMessageBox.warning(self, "No Packages Found", "No installed packages found.")
                return

            self.installed_table.setRowCount(len(installed_packages))

            for row, package in enumerate(installed_packages):
                package_name = package.split('/')[0]
                self.installed_table.setItem(row, 0, QTableWidgetItem(package_name))

                remove_button = QPushButton("Remove")
                remove_button.clicked.connect(lambda checked, pkg=package_name: self.remove_package_action(pkg))
                self.installed_table.setCellWidget(row, 1, remove_button)
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "Error", f"An error occurred while listing installed packages: {e}")


    def search_package(self):
        """Search for a package and display results"""
        search_term = self.search_box.text()
        results = subprocess.check_output(["apt-cache", "search", search_term], universal_newlines=True).splitlines()

        self.search_results_table.setRowCount(len(results))

        for row, result in enumerate(results):
            package_name = result.split(' - ')[0]
            self.search_results_table.setItem(row, 0, QTableWidgetItem(package_name))

            if self.package_installed(package_name):
                install_button = QPushButton("Currently Installed")
                install_button.setEnabled(False)
            else:
                install_button = QPushButton("Install")
                install_button.clicked.connect(lambda checked, pkg=package_name: self.install_package(pkg))

            self.search_results_table.setCellWidget(row, 1, install_button)

    def install_package(self, package_name):
        """Install a package"""
        try:
            subprocess.run(["sudo", "apt-get", "install", "-y", package_name], check=True)
            QMessageBox.information(self, "Install Package", f"The package {package_name} has been successfully installed!")
            self.search_package()  # Refresh the search results
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "Installation Error", f"An error occurred while installing the package: {e}")

    def remove_package(self):
        """List all installed packages and allow removal"""
        installed_packages = subprocess.check_output(["dpkg", "--get-selections"], universal_newlines=True).splitlines()
        self.installed_table.setRowCount(len(installed_packages))

        for row, package in enumerate(installed_packages):
            package_name = package.split()[0]
            self.installed_table.setItem(row, 0, QTableWidgetItem(package_name))

            remove_button = QPushButton("Remove")
            remove_button.clicked.connect(lambda checked, pkg=package_name: self.remove_package_action(pkg))
            self.installed_table.setCellWidget(row, 1, remove_button)

    def remove_package_action(self, package_name):
        """Remove the selected package"""
        try:
            subprocess.run(["sudo", "apt-get", "remove", "-y", package_name], check=True)
            QMessageBox.information(self, "Package Removed", f"The package {package_name} has been successfully removed.")
            self.remove_package()
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "Removal Error", f"An error occurred while removing {package_name}: {e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PackageManagerApp()
    window.show()
    sys.exit(app.exec_())
